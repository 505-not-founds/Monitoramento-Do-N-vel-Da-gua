#include <EEPROM.h>  // Biblioteca para usar a memória EEPROM

// Definição dos pinos conectados aos componentes
#define buzzer    8           // Buzzer de alerta sonoro
#define ECHO_PIN 10           // Pino ECHO do sensor ultrassônico (recebe o tempo do eco)
#define TRIG_PIN  9           // Pino TRIG do sensor ultrassônico (dispara o pulso)
#define ledGreen  6           // LED verde: situação segura
#define ledYellow 5           // LED amarelo: nível de atenção
#define ledRed    7           // LED vermelho: alerta de enchente
#define botaoTragedia 2       // Botão para registrar manualmente uma tragédia

#define EEPROM_ADDR 0         // Endereço da EEPROM onde o estado será salvo

bool tragediaGravada = false; // Variável que controla se uma tragédia já foi registrada

void setup() {
  Serial.begin(9600);  
  
  pinMode(ledGreen, OUTPUT);
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  pinMode(ledRed, OUTPUT);
  pinMode(buzzer, OUTPUT);
  pinMode(ledYellow, OUTPUT);
  pinMode(botaoTragedia, INPUT_PULLUP); // Botão com resistor de pull-up interno

  // Verifica se já existe registro anterior salvo na EEPROM
  if (EEPROM.read(EEPROM_ADDR) == 1) {
    tragediaGravada = true;
    Serial.println(">>> ALERTA GRAVADO: Houve uma enchente anterior.");
  } else {
    Serial.println(">>> Nenhuma tragédia registrada anteriormente.");
  }
}

// Função para ler a distância do sensor ultrassônico (em cm)
float readDistanceCM() {
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);        // Dispara o pulso ultrassônico
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);
  int duration = pulseIn(ECHO_PIN, HIGH); // Mede o tempo do eco
  return duration * 0.034 / 2;            // Converte o tempo em centímetros
}

void loop() {
  float distance = readDistanceCM();   // Lê a distância atual da água
  Serial.print("Distância: ");
  Serial.print(distance);
  Serial.println(" cm");

  bool Enchente = (distance < 15);     // Define critério para considerar uma enchente

  // Se botão for pressionado e ainda não houver registro, salva na EEPROM
  if (digitalRead(botaoTragedia) == LOW && !tragediaGravada) {
    EEPROM.update(EEPROM_ADDR, 1);
    tragediaGravada = true;
    Serial.println(">> TRAGÉDIA REGISTRADA MANUALMENTE!");
    delay(1000); // Evita múltiplos registros por clique
  }

  // Se detectar enchente automaticamente
  if (Enchente) {
    tone(buzzer, 1000);  // Ativa buzzer
    digitalWrite(ledRed, HIGH);    // Alerta vermelho
    digitalWrite(ledGreen, LOW);
    digitalWrite(ledYellow, LOW);

    // Salva registro de tragédia se ainda não tiver sido salvo
    if (!tragediaGravada) {
      EEPROM.update(EEPROM_ADDR, 1);
      tragediaGravada = true;
      Serial.println(">> TRAGÉDIA REGISTRADA AUTOMATICAMENTE!");
    }

  } else if (distance < 100) {
    // Situação intermediária: nível de atenção
    noTone(buzzer);
    digitalWrite(ledYellow, HIGH);
    digitalWrite(ledRed, LOW);
    digitalWrite(ledGreen, LOW);

  } else {
    // Situação normal: água distante
    noTone(buzzer);
    digitalWrite(ledGreen, HIGH);
    digitalWrite(ledRed, LOW);
    digitalWrite(ledYellow, LOW);
  }

  delay(500); // Espera meio segundo antes da próxima leitura
}
